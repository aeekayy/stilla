/*
 * Buffet Config Manager
 *
 * A configuration service that stores and retrieves configuration.
 *
 * API version: 0.1.0
 * Contact: apiteam@swagger.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"net/http"

	"github.com/gin-gonic/gin"
)

// Route is the information for every URI.
type Route struct {
	// Name is the name of this Route.
	Name string
	// Method is the string for the HTTP method. ex) GET, POST etc..
	Method string
	// Pattern is the pattern of the URI.
	Pattern string
	// HandlerFunc is the handler function of this route.
	HandlerFunc func(*DAL) gin.HandlerFunc
}

// Routes is the list of the generated Route.
type Routes []Route

// NewRouter returns a new router.
func NewRouter(dal *DAL) *gin.Engine {
	router := gin.Default()
	router.SetTrustedProxies([]string{})
	// Simple group: v1
	v1 := router.Group("/api/v1")
	for _, route := range routes {
		handler := route.HandlerFunc(dal)
		switch route.Method {
		case http.MethodGet:
			v1.GET(route.Pattern, handler)
		case http.MethodPost:
			v1.POST(route.Pattern, handler)
		case http.MethodPut:
			v1.PUT(route.Pattern, handler)
		case http.MethodPatch:
			v1.PATCH(route.Pattern, handler)
		case http.MethodDelete:
			v1.DELETE(route.Pattern, handler)
		}
	}

	return router
}

var routes = Routes{

	{
		"GetRecords",
		http.MethodGet,
		"/records",
		GetRecords,
	},

	{
		"AddConfig",
		http.MethodPost,
		"/config",
		AddConfig,
	},

	{
		"GetConfigByID",
		http.MethodGet,
		"/config/:configId",
		GetConfigByID,
	},

	{
		"GetConfigs",
		http.MethodGet,
		"/configs",
		GetConfigs,
	},

	{
		"UpdateConfigByID",
		http.MethodPatch,
		"/config/:configId",
		UpdateConfigByID,
	},

	{
		"HostRegister",
		http.MethodPost,
		"/host/register",
		HostRegister,
	},

	{
		"HostLogin",
		http.MethodPost,
		"/host/login",
		HostLogin,
	},

	{
		"PingGet",
		http.MethodGet,
		"/ping",
		PingGet,
	},
}
